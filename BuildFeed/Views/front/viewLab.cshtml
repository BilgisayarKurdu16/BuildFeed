@model IEnumerable<BuildFeed.Models.BuildModel>
@using BuildFeed.Code
@using BuildFeed.Models
@using Humanizer;
@{
   ViewBag.Title = string.Format("{0}{1} | {2}", string.Format(BuildFeed.Local.Front.BuildsFrom, ViewBag.ItemId), ViewBag.PageNumber == 1 ? "" : string.Format(BuildFeed.Local.Common.PageTitleSegment, ViewBag.PageNumber), BuildFeed.Local.Common.SiteName);
}

@section head
{
   @if (ViewBag.MetaItem != null)
   {
      <meta name="description" content="@ViewBag.MetaItem.MetaDescription" />
      <meta property="og:description" content="@ViewBag.MetaItem.MetaDescription" />
   }
   else
   {
      string metaDesc = string.Format(BuildFeed.Local.Front.LabMetaGeneric, ViewBag.ItemId);
      <meta name="description" content="@metaDesc" />
      <meta property="og:description" content="@metaDesc" />
   }

   @if (ViewBag.PageNumber != 1)
   {
      <meta name="robots" content="noindex, follow" />
   }
}

<h1 class="eager-wrapping">@string.Format(BuildFeed.Local.Front.BuildsFrom, ViewBag.ItemId)</h1>
@if (ViewBag.MetaItem != null && !string.IsNullOrWhiteSpace(ViewBag.MetaItem.PageContent))
{
   <h3>@BuildFeed.Local.Front.About</h3>
   @Html.Raw(ViewBag.MetaItem.PageContent)
}
<h3>@BuildFeed.Local.Front.Share</h3>
<div class="addthis_sharing_toolbox"></div>
<br />
<h3>@BuildFeed.Local.Front.Listing</h3>
<div class="build-group-listing">
   @foreach (BuildModel build in Model)
   {
      <div class="build-group">
         <h3 class="build-group-title" title="@build.Lab">
            <a href="@Url.Action("ViewBuild", new
                           {
                              id = build.Id
                           })">
               @($"{build.MajorVersion}.{build.MinorVersion}.{build.Number}.{build.Revision}")
            </a>
         </h3>
         @if (User.Identity.IsAuthenticated)
            {
            <p>
               <a href="@Url.Action("editBuild", new { id = build.Id })" class="btn btn-primary btn-xs">@BuildFeed.Local.Front.Edit</a>
               @if (Roles.IsUserInRole("Administrators"))
               {
                  <a href="@Url.Action("DeleteBuild", new { id = build.Id })" class="btn btn-danger btn-xs">@BuildFeed.Local.Front.Delete</a>
               }
            </p>
         }
         <p class="build-group-p">
            @if (build.BuildTime.HasValue)
            {
               <span title="@build.BuildTime.Value.Humanize()"><i class="fa fa-calendar fa-fw"></i> @build.BuildTime.Value.ToLongDateWithoutDay()</span><br />
                  <span title="@build.BuildTime.Value.Humanize()"><i class="fa fa-clock-o fa-fw"></i> @build.BuildTime.Value.ToShortTimeString()</span><br />
            }
         </p>
         <p class="build-group-p">
            @if (build.IsLeaked)
            {
               <span class="label label-success label-build-status">@BuildFeed.Local.Front.Public</span>
            }
            else
            {
               <span class="label label-danger label-build-status">@BuildFeed.Local.Front.Private</span>
            }
         </p>
      </div>
   }
   <div class="build-group-empty"></div>
   <div class="build-group-empty"></div>
   <div class="build-group-empty"></div>
</div>
@PaginationHelpers.PaginationBlock((int)ViewBag.PageNumber, (int)ViewBag.PageCount, "viewLab", ViewContext.RouteData.Values)