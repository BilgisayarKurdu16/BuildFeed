@model BuildFeed.Models.ViewModel.StatsPage

@{
    ViewBag.Title = string.Format("{0} | {1}", BuildFeed.Local.Common.Statistics, BuildFeed.Local.Common.SiteName);
}

<h2>@BuildFeed.Local.Common.Statistics</h2>

<h4>@BuildFeed.Local.Support.StatsNewAdditions</h4>
<canvas id="stats-addition" width="960" height="320"></canvas>

<h4>@BuildFeed.Local.Support.StatsCompiled</h4>
<canvas id="stats-compiled" width="960" height="320"></canvas>

<h4>@BuildFeed.Local.Support.StatsLab</h4>
<p>@BuildFeed.Local.Support.StatsLabIncluded</p>
<canvas id="stats-labs" width="960" height="320"></canvas>

@section scripts
{
    <script type="text/javascript" src="~/Scripts/Chart.min.js"></script>
    <script type="text/javascript">
        $(function () {
            Chart.defaults.global.responsive = true;
            //Chart.defaults.global.showTooltips = false;
            Chart.defaults.global.scaleFontFamily = "Hind, sans-serif";
            Chart.defaults.global.scaleFontColor = "#bbb";

            Chart.defaults.Line.scaleShowGridLines = false;

            var additionData = {
                labels: [ @Html.Raw(string.Join(", ", Model.AdditionsByMonth.Select(m => m.Month % 4 != 1 ? "\"\"" : string.Format("\"{0} {1}, {2}\"", BuildFeed.Local.Support.Week, m.Month, m.Year)).ToArray()))],
                datasets: [
                    {
                        label: "@BuildFeed.Local.Support.AdditionsToBuildFeed",
                        fillColor: "#008cba",
                        strokeColor: "#00526e",
                        pointColor: "#00526e",
                        pointStrokeColor: "#fff",
                        data: [ @string.Join(", ", Model.AdditionsByMonth.Select(m => m.Count.ToString()).ToArray())]
                    }
                ]
            };

            var additionChart = new Chart(document.getElementById("stats-addition").getContext("2d")).Line(additionData, {});


            var compiledData = {
                labels: [ @Html.Raw(string.Join(", ", Model.CompilesByMonth.Select(m => string.Format("\"{0} {1}\"", System.Globalization.DateTimeFormatInfo.CurrentInfo.GetMonthName(m.Month), m.Year)).ToArray()))],
                datasets: [
                    {
                        label: "@BuildFeed.Local.Support.BuildsCompiled",
                        fillColor: "#008cba",
                        strokeColor: "#00526e",
                        pointColor: "#00526e",
                        pointStrokeColor: "#fff",
                        data: [ @string.Join(", ", Model.CompilesByMonth.Select(m => m.Count.ToString()).ToArray())]
                    }
                ]
            };

            var compiledChart = new Chart(document.getElementById("stats-compiled").getContext("2d")).Line(compiledData, { scaleLabel: "<%= (Math.round(Math.pow(value, Math.E)/10)*10) %>", tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%=Math.round(Math.pow(value, Math.E))%>", scaleOverride: true, scaleSteps: 10, scaleStepWidth: 2, scaleStartValue: 1, scaleIntegersOnly: false, pointHitDetectionRadius: 0 });

            var labData = {
                labels: [ @Html.Raw(string.Join(", ", Model.BuildsByLab.Select(l => string.Format("\"{0}\"", l.Item1))))],
                datasets: [
                    {
                        label: "@BuildFeed.Local.Support.Labs",
                        fillColor: "#008cba",
                        strokeColor: "#00526e",
                        pointColor: "#00526e",
                        pointStrokeColor: "#fff",
                        data: [ @string.Join(", ", Model.BuildsByLab.Select(l => l.Item2.ToString()))]
                    }
                ]
            };

            var labChart = new Chart(document.getElementById("stats-labs").getContext("2d")).Bar(labData, {});
        });
    </script>
}